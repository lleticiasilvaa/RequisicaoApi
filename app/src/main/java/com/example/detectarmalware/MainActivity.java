package com.example.detectarmalware;

import static com.google.firebase.crashlytics.buildtools.reloc.org.apache.http.conn.ssl.SSLConnectionSocketFactory.SSL;

import androidx.annotation.NonNull;
import androidx.appcompat.app.AppCompatActivity;

import android.content.Context;
import android.content.Intent;
import android.content.pm.ApplicationInfo;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.os.AsyncTask;
import android.os.Build;
import android.os.Bundle;
import android.util.Log;
import android.view.View;
import android.widget.ArrayAdapter;

import com.google.firebase.crashlytics.buildtools.reloc.org.apache.http.HttpEntity;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.security.cert.CertificateException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.List;
import java.util.Locale;
import java.util.UUID;

import okhttp3.Call;
import okhttp3.Callback;
import okhttp3.MediaType;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.net.HttpURLConnection;
import java.net.URL;

import java.io.IOException;
import java.util.concurrent.Callable;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

import javax.net.ssl.HostnameVerifier;
import javax.net.ssl.SSLContext;
import javax.net.ssl.SSLSession;
import javax.net.ssl.SSLSocketFactory;
import javax.net.ssl.TrustManager;
import javax.net.ssl.X509TrustManager;

public class MainActivity extends AppCompatActivity {
    private String ID;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        //coletar ID
        ID = UUID.randomUUID().toString();
        //salvaiID arquivo
        writeID(ID);

        Calendar calendarStart = Calendar.getInstance();
        SimpleDateFormat simpleDateFormat = new SimpleDateFormat("dd-MM-yyyy HH:mm:ss", Locale.getDefault());
        String dataAtual = simpleDateFormat.format(calendarStart.getTime()).substring(0,10);;


        ArrayList<String> dados = new ArrayList<>();
        lerDados( "user.csv", dados);
        lerDados( "pacotes.csv", dados);
        //Log.i("MainActivity/onStart()", "Dados aqui " + dados);

        if(!(dados.contains(dataAtual))) {
            infosUser(dataAtual);
        }

        //coletarListaApps(dados);
        coletarApps();
    }


//    public class Requisicao extends AsyncTask<String, String, String> {
//        private String uri;
//        private String packageName;
//        private String[] listaPermissoes;
//
//        public Requisicao(String uri, String packageName, String[] listaPermissoes) {
//            this.uri = uri;
//            this.packageName = packageName;
//            this.listaPermissoes = listaPermissoes;
//        }
//
//        @Override
//        protected String doInBackground(String... strings) {
//            JSONObject jsonObject = new JSONObject();
//            try {
//                jsonObject.put("package_name", packageName);
//                jsonObject.put("lista_permissoes", new JSONArray(listaPermissoes));
//            } catch (JSONException e) {
//                e.printStackTrace();
//            }
//
//            String json = jsonObject.toString();
//            String retorno = Conexao.getClassificacao(uri, json);
//            return retorno;
//        }
//
//        @Override
//        protected void onPostExecute(String s) {
//            System.out.println("Classificacao:"+s);
//        }
//    }

    public class Requisicao implements Callable<String> {
        private String uri;
        private String packageName;
        private String[] listaPermissoes;

        public Requisicao(String uri, String packageName, String[] listaPermissoes) {
            this.uri = uri;
            this.packageName = packageName;
            this.listaPermissoes = listaPermissoes;
        }

        @Override
        public String call() {
            JSONObject jsonObject = new JSONObject();
            try {
                jsonObject.put("package_name", packageName);
                jsonObject.put("lista_permissoes", new JSONArray(listaPermissoes));
            } catch (JSONException e) {
                e.printStackTrace();
            }

            String json = jsonObject.toString();
            String retorno = Conexao.getClassificacao(uri, json);
            return retorno;
        }
    }

    //salvar id no armazenamento interno
    private void writeID(String ID) {
        String FILE_NAME = "ID.csv";
        FileOutputStream fos = null;
        try {
            fos = openFileOutput(FILE_NAME, MODE_PRIVATE);
            fos.write((ID + "s\n").getBytes());
            Log.i("MainActivity/saveGps()", "Saved to " + getFilesDir() + "/" + FILE_NAME); //mostrar onde arquivo foi salvo
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            if (fos != null) {
                try {
                    fos.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }
    }

    //coletar lista de aplicativos e salvar no armazenamento interno
    private void coletarListaApps(ArrayList<String> dados) {
        //coletar lista de aplicativo
        List<ApplicationInfo> applicationInfoList = getPackageManager().getInstalledApplications(PackageManager.GET_META_DATA);
        String[] stringsArray = new String[applicationInfoList.size()];
        int i = 0;
        for (ApplicationInfo applicationInfo : applicationInfoList) {
            // so irá salvar se o aplicativo já não foi registrado anteriormente
            if(!(dados.contains(applicationInfo.packageName))){
                stringsArray[i] = applicationInfo.packageName;
            }
            i++;
        }
        Log.i("MainActivity/apps()", "lista aplicativos coletada");

        //salvar lista de apps no armazenamento interno:
        String FILE_NAME;
        FILE_NAME = "pacotes.csv";
        FileOutputStream fos = null;
        try {
            fos = openFileOutput(FILE_NAME, MODE_APPEND);
            for (i = 0; i < applicationInfoList.size(); i++) {
                fos.write((stringsArray[i] + "\n").getBytes());
            }
            System.out.print("\nSaved to " + getFilesDir() + "/" + FILE_NAME);
            Log.i("MainActivity/saveApps()", "Saved to " + getFilesDir() + "/" + FILE_NAME); //mostrar onde arquivo foi salvo
        } catch (IOException e) {
            e.printStackTrace();
            Log.e("MainActivity/saveGps()", "Erro: salvar no arquivo pacotes.csv");
        } finally {
            if (fos != null) {
                try {
                    fos.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }

        // salvar lista de permissoes do apps
        FileOutputStream fosPermission = null;
        FILE_NAME = ("permissions.csv");
        for (String packageName : stringsArray) {
            try {
                PackageInfo packageInfo = getPackageManager().getPackageInfo(packageName, PackageManager.GET_PERMISSIONS);
                String[] permissions = packageInfo.requestedPermissions;
                fosPermission = openFileOutput(FILE_NAME, MODE_APPEND);

                System.out.println("Permissoes do" + packageName + ":");

                //requisição para o flask

                if (permissions != null) {
                    fosPermission.write(("\nPACKAGE " + packageName + " has these permissions: \n").getBytes());

                    for (String permission : permissions) {
                        fosPermission.write((permission + "\n").getBytes());
//                        Log.d("Permissions", permission);
//                        Log.i("MainActivity/saveApps()", "Saved to " + getFilesDir() + "/" + FILE_NAME); //mostrar onde arquivo foi salvo
                    }
                }

            } catch (PackageManager.NameNotFoundException e) {
                e.printStackTrace();
            } catch (FileNotFoundException e) {
                e.printStackTrace();
            } catch (IOException e) {
                e.printStackTrace();
                Log.e("MainActivity/saveGps()", "Erro: salvar no arquivo " + packageName + ".csv");

            }
        }
    }

//    public void coletarApps(){
//        //coletar lista de aplicativo
//        List<ApplicationInfo> applicationInfoList = getPackageManager().getInstalledApplications(PackageManager.GET_META_DATA);
//        String[] stringsArray = new String[applicationInfoList.size()];
//        int i = 0;
//        for (ApplicationInfo applicationInfo : applicationInfoList) {
//            try{
//                String packageName = applicationInfo.packageName;
//                stringsArray[i]  = packageName;
//                PackageInfo packageInfo = getPackageManager().getPackageInfo(packageName, PackageManager.GET_PERMISSIONS);
//                String[] permissions = packageInfo.requestedPermissions;
//
//                Requisicao requisicao = new Requisicao("http://192.168.100.193:5000/predict", packageName, permissions);
//                requisicao.execute();
//
//                i++;
//            } catch (PackageManager.NameNotFoundException e) {
//                e.printStackTrace();
//            }
//        }
//    }
    public void coletarApps() {
        // Coletar lista de aplicativos
        List<ApplicationInfo> applicationInfoList = getPackageManager().getInstalledApplications(PackageManager.GET_META_DATA);
        String[] stringsArray = new String[applicationInfoList.size()];
        int i = 0;

        ExecutorService executor = Executors.newFixedThreadPool(5); // Limite de 5 threads simultâneas

        for (ApplicationInfo applicationInfo : applicationInfoList) {
            try {
                String packageName = applicationInfo.packageName;
                stringsArray[i] = packageName;
                PackageInfo packageInfo = getPackageManager().getPackageInfo(packageName, PackageManager.GET_PERMISSIONS);
                String[] permissions = packageInfo.requestedPermissions;

                Requisicao requisicao = new Requisicao("http://192.168.100.193:5000/predict", packageName, permissions);
                Future<String> future = executor.submit(requisicao);
                String retorno = future.get(); // Obter o resultado da requisição

                System.out.println(packageName + "=" + retorno);

                i++;
            } catch (PackageManager.NameNotFoundException | ExecutionException | InterruptedException e) {
                e.printStackTrace();
            }
        }

        executor.shutdown(); // Encerrar o executor após a conclusão das tarefas
    }

    public void infosUser(String dataAtual) {
        String FILE_NAME = "user.csv";
        FileOutputStream fos = null;
        try {
            String modelo;
            String versao;

            modelo = Build.MODEL;
            versao = Build.VERSION.RELEASE;

            fos = openFileOutput(FILE_NAME, MODE_PRIVATE);
            fos.write((modelo + "s\n").getBytes());
            fos.write((versao + "s\n").getBytes());
            fos.write((dataAtual + "s\n").getBytes());

            Log.i("MainActivity/infosUser()", "Saved to " + getFilesDir() + "/" + FILE_NAME); //mostrar onde arquivo foi salvo
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            if (fos != null) {
                try {
                    fos.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }
    }

    public void lerDados(String FILENAME, ArrayList<String> dados) {
        FileInputStream fis = null;
        try {
            fis = openFileInput(FILENAME);
            InputStreamReader isr = new InputStreamReader(fis);
            BufferedReader br = new BufferedReader(isr);
            String lido;

            while ((lido = br.readLine()) != null) {
                dados.add(lido);
            }

        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            if (fis != null) {
                try {
                    fis.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }
    }

    //metodo para quando clicar no botal "ANALISAR DADOS COLETADOS"
    public void telaDados(View view) {
        Intent intent = new Intent(getApplicationContext(), AnaliseDadosColetados.class);
        startActivity(intent);
    }
}